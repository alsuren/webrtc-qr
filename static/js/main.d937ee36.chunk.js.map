{"version":3,"sources":["assets/chime.mp3","App/components/P2P.js","App/components/Gif.js","App/components/QR.js","App/components/TextBox.js","App/components/Host.js","App/components/Guest.js","App/components/Chime.js","App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","P2PContext","createContext","P2PProvider","state","offer","answer","peer","connected","hosting","joining","latestWebrtcData","connect","qrcodeData","_this","on","console","log","setState","data","signal","guest","host","Peer","initiator","trickle","objectMode","join","react_default","a","createElement","Provider","value","Object","objectSpread","this","props","children","Component","P2PConsumer","Consumer","GIF","index","intervalId","_this2","setInterval","images","length","clearInterval","react","Array","from","keys","map","i","key","src","alt","style","width","height","objectFit","padding","boxSizing","OPTIONS","type","size","level","SIZE","Reader","segments","total","sent","handleData","_this$state","parsed","JSON","parse","defineProperty","t","raw","values","sort","b","x","s","atob","onData","lib_default","opacity","position","top","left","bottom","right","delay","_facingMode","showViewFinder","onScan","onError","error","Encoder","generateImages","btoa","stringify","match","RegExp","encode","_this3","Gif","TextBox","_ref","_useDebouncedCallback","useDebouncedCallback","write","leading","debouncedCallback","slicedToArray","onChange","e","target","Host","TextBox_TextBox","QR_Reader","onClick","QR_Encoder","Guest","Chime","preload","autoPlay","playsInline","chime","App","P2P_P2PProvider","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d937ee36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chime.972c97d9.mp3\";","import React, { Component, createContext } from 'react'\nimport Peer from 'simple-peer'\n\nconst P2PContext = createContext({})\n\nclass P2PProvider extends Component {\n  state = {\n    offer: null,\n    answer: null,\n    peer: null,\n    connected: false,\n    hosting: false,\n    joining: false,\n    latestWebrtcData: null,\n  }\n\n  render() {\n    return (\n      <P2PContext.Provider\n        value={{\n          ...this.state,\n          connect: this.connect,\n          host: this.host,\n          guest: this.guest,\n          join: this.join,\n        }}\n      >\n        {this.props.children}\n      </P2PContext.Provider>\n    )\n  }\n\n  connect = qrcodeData => {\n    const { peer } = this.state\n    peer.on('connect', () => {\n      console.log('Host connected')\n      this.setState({ connected: true })\n    })\n    peer.on('data', data => this.setState({latestWebrtcData: data}))\n    peer.signal(qrcodeData)\n  }\n\n  guest = () => {\n    this.setState({ joining: true })\n  }\n\n  host = () => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      objectMode: true,\n    })\n    peer.on('signal', offer => this.setState({ offer }))\n    this.setState({ peer, hosting: true })\n  }\n\n  join = data => {\n    const peer = new Peer({\n      trickle: false,\n      objectMode: true,\n    })\n    peer.on('signal', answer => this.setState({ answer }))\n    peer.on('connect', () => {\n      console.log('Guest connected')\n      this.setState({ connected: true })\n    })\n    peer.on('data', data => this.setState({latestWebrtcData: data}))\n    peer.signal(data)\n    this.setState({ peer })\n  }\n}\n\nconst P2PConsumer = P2PContext.Consumer\n\nexport { P2PProvider, P2PConsumer }\n","import React, { Component, Fragment } from 'react'\n\nconst INTERVAL = 200\n\nclass GIF extends Component {\n  state = { index: 0, intervalId: null }\n\n  componentDidMount() {\n    const intervalId = setInterval(() => {\n      const index =\n        this.state.index === this.props.images.length - 1\n          ? 0\n          : this.state.index + 1\n      this.setState({ index })\n    }, INTERVAL)\n    this.setState({ intervalId })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId)\n  }\n\n  render() {\n    const { images } = this.props\n    if (!images.length) {\n      return null\n    }\n    const { index } = this.state\n\n    return (\n      <Fragment>\n        <p>\n          Sending {\n            Array.from(images.keys()).map(\n              (i) => i === index ? '█' : '▁'\n            ).join('')}\n        </p>\n        <img\n          key={index}\n          src={images[index]}\n          alt={index}\n          style={{\n            width: '90vw',\n            height: '90vh',\n            objectFit: 'contain',\n            padding: '5vw',\n            boxSizing: 'border-box',\n          }}\n        />\n      </Fragment>\n    )\n  }\n}\n\nexport default GIF\n","import React, { Component, Fragment } from 'react'\nimport encode from 'qr-encode'\nimport QrR from 'react-qr-reader'\nimport GIF from './Gif'\n\nconst OPTIONS = { type: 10, size: 6, level: 'H' }\nconst SIZE = 40\n\nclass Reader extends Component {\n  state = { data: null, segments: {}, total: 0, sent: false }\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <Fragment>\n        <p>\n          Received {\n            this.state.total\n            ? Array.from(Array(this.state.total).keys()).map(\n              (i) => i in this.state.segments ? '█' : '▁'\n            ).join('')\n            : \"nothing so far.\"\n          }\n        </p>\n        <QrR\n          style={{\n            opacity: 0.1,\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n          }}\n          delay={10}\n          _facingMode=\"user\"\n          showViewFinder={false}\n          onScan={this.handleData}\n          onError={error => console.log('--> Error: ', error)}\n        />\n      </Fragment>\n    )\n  }\n\n  handleData = data => {\n    if (data) {\n      const { segments, sent } = this.state\n      const parsed = JSON.parse(data)\n      if (!segments[parsed.i]){\n        this.setState({\n          segments: {...segments, [parsed.i]: parsed},\n          total: parsed.t,\n        })\n      }\n      if (parsed.t === Object.keys(segments).length && !sent) {\n        this.setState({ sent: true })\n        const raw = Object.values(segments)\n          .sort((a, b) => a.i - b.i)\n          .map(x => x.s)\n          .join('')\n        const signal = JSON.parse(atob(raw))\n        this.props.onData(signal)\n      }\n    }\n  }\n}\n\nclass Encoder extends Component {\n  state = { images: [] }\n\n  componentDidMount() {\n    const { data } = this.props\n    if (!data) {\n      return\n    }\n    this.generateImages(data)\n  }\n\n  render() {\n    return <GIF images={this.state.images} />\n  }\n\n  generateImages = data => {\n    const serialized = btoa(JSON.stringify(data))\n    const segments = serialized.match(new RegExp('.{1,' + SIZE + '}', 'g'))\n    const images = segments.map((s, i) =>\n      encode(JSON.stringify({ t: segments.length, i, s }), OPTIONS),\n    )\n    this.setState({ images })\n  }\n}\n\nexport { Encoder, Reader }\n","import React from 'react'\nimport { useDebouncedCallback } from 'use-debounce';\n\nexport const TextBox = ({peer}) => {\n  const [debouncedCallback] = useDebouncedCallback((value) => {\n    peer.write(value)\n  }, 500, {leading: true})\n  return <input onChange={\n    (e) => debouncedCallback(e.target.value)}>\n  </input>\n}\n","import React, { Fragment } from 'react'\nimport { P2PConsumer } from './P2P'\nimport { Encoder, Reader } from './QR'\nimport { TextBox } from './TextBox'\n\nexport default () => (\n  <P2PConsumer>\n    {({ host, connect, offer, hosting, joining, connected, peer, latestWebrtcData }) => {\n      if (joining) {\n        return null\n      }\n\n      if (connected) {\n        return <div>\n          <p>Host connected.</p>\n          <TextBox peer={peer}/>\n          <p>{latestWebrtcData}</p>\n        </div>\n      }\n\n      return (\n        <Fragment>\n          {hosting && <Reader onData={data => connect(data)} />}\n          {!hosting && <button onClick={host}>Host</button>}\n          {offer && <Encoder data={offer} />}\n        </Fragment>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React, { Fragment } from 'react'\nimport { P2PConsumer } from './P2P'\nimport { Encoder, Reader } from './QR'\nimport { TextBox } from './TextBox'\n\nexport default () => (\n  <P2PConsumer>\n    {({ guest, join, answer, hosting, joining, connected, peer, latestWebrtcData }) => {\n      if (hosting) {\n        return null\n      }\n\n      if (connected) {\n        return <div>\n          <p>Guest connected.</p>\n          <TextBox peer={peer}/>\n          <p>{latestWebrtcData}</p>\n        </div>\n      }\n\n      return (\n        <Fragment>\n          {!joining && <button onClick={guest}>Join</button>}\n          {joining && <Reader onData={data => join(data)} />}\n          {answer && <Encoder data={answer} />}\n        </Fragment>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React from 'react'\nimport { P2PConsumer } from './P2P'\nimport chime from '../../assets/chime.mp3'\n\nexport default () => (\n  <P2PConsumer>\n    {({ connected }) => {\n      if (!connected) {\n        return null\n      }\n\n      return (\n        <audio preload=\"auto\" autoPlay playsInline>\n          <source src={chime} />\n        </audio>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React, { Component } from 'react'\nimport { P2PProvider } from './components/P2P'\nimport Host from './components/Host'\nimport Guest from './components/Guest'\nimport Chime from './components/Chime'\n\nclass App extends Component {\n  render() {\n    return (\n      <P2PProvider>\n        <Host />\n        <Guest />\n        <Chime />\n      </P2PProvider>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}