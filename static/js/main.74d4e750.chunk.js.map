{"version":3,"sources":["assets/chime.mp3","App/components/P2P.js","App/components/Gif.js","App/components/QR.js","App/components/Host.js","App/components/Guest.js","App/components/Chime.js","App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","P2PContext","createContext","P2PProvider","state","offer","answer","peer","connected","hosting","joining","connect","data","_this","on","console","log","setState","signal","guest","host","Peer","initiator","trickle","join","react_default","a","createElement","Provider","value","Object","objectSpread","this","props","children","Component","P2PConsumer","Consumer","GIF","index","intervalId","_this2","setInterval","images","length","clearInterval","key","src","alt","style","width","height","objectFit","padding","boxSizing","OPTIONS","type","size","level","SIZE","Reader","segments","Set","sent","handleData","_this$state","parsed","JSON","parse","add","t","raw","Array","from","map","s","sort","b","i","x","atob","onData","lib_default","opacity","position","top","left","bottom","right","delay","_facingMode","showViewFinder","onScan","onError","error","Encoder","generateImages","btoa","stringify","match","RegExp","encode","Gif","Host","_ref","react","QR_Encoder","QR_Reader","onClick","Guest","Chime","preload","autoPlay","playsInline","chime","App","P2P_P2PProvider","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74d4e750.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chime.972c97d9.mp3\";","import React, { Component, createContext } from 'react'\nimport Peer from 'simple-peer'\n\nconst P2PContext = createContext({})\n\nclass P2PProvider extends Component {\n  state = {\n    offer: null,\n    answer: null,\n    peer: null,\n    connected: false,\n    hosting: false,\n    joining: false,\n  }\n\n  render() {\n    return (\n      <P2PContext.Provider\n        value={{\n          ...this.state,\n          connect: this.connect,\n          host: this.host,\n          guest: this.guest,\n          join: this.join,\n        }}\n      >\n        {this.props.children}\n      </P2PContext.Provider>\n    )\n  }\n\n  connect = data => {\n    const { peer } = this.state\n    peer.on('connect', () => {\n      console.log('Host connected')\n      this.setState({ connected: true })\n    })\n    peer.signal(data)\n  }\n\n  guest = () => {\n    this.setState({ joining: true })\n  }\n\n  host = () => {\n    const peer = new Peer({ initiator: true, trickle: false })\n    peer.on('signal', offer => this.setState({ offer }))\n    this.setState({ peer, hosting: true })\n  }\n\n  join = data => {\n    const peer = new Peer({ trickle: false })\n    peer.on('signal', answer => this.setState({ answer }))\n    peer.on('connect', () => {\n      console.log('Guest connected')\n      this.setState({ connected: true })\n    })\n    peer.signal(data)\n    this.setState({ peer })\n  }\n}\n\nconst P2PConsumer = P2PContext.Consumer\n\nexport { P2PProvider, P2PConsumer }\n","import React, { Component } from 'react'\n\nconst INTERVAL = 100\n\nclass GIF extends Component {\n  state = { index: 0, intervalId: null }\n\n  componentDidMount() {\n    const intervalId = setInterval(() => {\n      const index =\n        this.state.index === this.props.images.length - 1\n          ? 0\n          : this.state.index + 1\n      this.setState({ index })\n    }, INTERVAL)\n    this.setState({ intervalId })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId)\n  }\n\n  render() {\n    const { images } = this.props\n    if (!images.length) {\n      return null\n    }\n    const { index } = this.state\n\n    return (\n      <img\n        key={index}\n        src={images[index]}\n        alt={index}\n        style={{\n          width: '90vw',\n          height: '90vh',\n          objectFit: 'contain',\n          padding: '5vw',\n          boxSizing: 'border-box',\n        }}\n      />\n    )\n  }\n}\n\nexport default GIF\n","import React, { Component } from 'react'\nimport encode from 'qr-encode'\nimport QrR from 'react-qr-reader'\nimport GIF from './Gif'\n\nconst OPTIONS = { type: 10, size: 6, level: 'H' }\nconst SIZE = 40\n\nclass Reader extends Component {\n  state = { data: null, segments: new Set(), sent: false }\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <QrR\n        style={{\n          opacity: 0.1,\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n        }}\n        delay={10}\n        _facingMode=\"user\"\n        showViewFinder={false}\n        onScan={this.handleData}\n        onError={error => console.log('--> Error: ', error)}\n      />\n    )\n  }\n\n  handleData = data => {\n    if (data) {\n      const { segments, sent } = this.state\n      const parsed = JSON.parse(data)\n      this.setState({ segments: segments.add(data) })\n      if (parsed.t === segments.size && !sent) {\n        this.setState({ sent: true })\n        const raw = Array.from(segments)\n          .map(s => JSON.parse(s))\n          .sort((a, b) => a.i - b.i)\n          .map(x => x.s)\n          .join('')\n        const signal = JSON.parse(atob(raw))\n        this.props.onData(signal)\n      }\n    }\n  }\n}\n\nclass Encoder extends Component {\n  state = { images: [] }\n\n  componentDidMount() {\n    const { data } = this.props\n    if (!data) {\n      return\n    }\n    this.generateImages(data)\n  }\n\n  render() {\n    return <GIF images={this.state.images} />\n  }\n\n  generateImages = data => {\n    const serialized = btoa(JSON.stringify(data))\n    const segments = serialized.match(new RegExp('.{1,' + SIZE + '}', 'g'))\n    const images = segments.map((s, i) =>\n      encode(JSON.stringify({ t: segments.length, i, s }), OPTIONS),\n    )\n    this.setState({ images })\n  }\n}\n\nexport { Encoder, Reader }\n","import React, { Fragment } from 'react'\nimport { P2PConsumer } from './P2P'\nimport { Encoder, Reader } from './QR'\n\nexport default () => (\n  <P2PConsumer>\n    {({ host, connect, offer, hosting, joining, connected }) => {\n      if (joining) {\n        return null\n      }\n\n      if (connected) {\n        return <div>Host connected</div>\n      }\n\n      return (\n        <Fragment>\n          {offer && <Encoder data={offer} />}\n          {hosting && <Reader onData={data => connect(data)} />}\n          {!hosting && <button onClick={host}>Host</button>}\n        </Fragment>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React, { Fragment } from 'react'\nimport { P2PConsumer } from './P2P'\nimport { Encoder, Reader } from './QR'\n\nexport default () => (\n  <P2PConsumer>\n    {({ guest, join, answer, hosting, joining, connected }) => {\n      if (hosting) {\n        return null\n      }\n\n      if (connected) {\n        return <div>Guest connected</div>\n      }\n\n      return (\n        <Fragment>\n          {!joining && <button onClick={guest}>Join</button>}\n          {joining && <Reader onData={data => join(data)} />}\n          {answer && <Encoder data={answer} />}\n        </Fragment>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React from 'react'\nimport { P2PConsumer } from './P2P'\nimport chime from '../../assets/chime.mp3'\n\nexport default () => (\n  <P2PConsumer>\n    {({ connected }) => {\n      if (!connected) {\n        return null\n      }\n\n      return (\n        <audio preload=\"auto\" autoPlay playsInline>\n          <source src={chime} />\n        </audio>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React, { Component } from 'react'\nimport { P2PProvider } from './components/P2P'\nimport Host from './components/Host'\nimport Guest from './components/Guest'\nimport Chime from './components/Chime'\n\nclass App extends Component {\n  render() {\n    return (\n      <P2PProvider>\n        <Host />\n        <Guest />\n        <Chime />\n      </P2PProvider>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}